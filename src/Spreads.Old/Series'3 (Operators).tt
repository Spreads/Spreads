<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#
    var ops = new string[]
    {
	    "+",
	    "-",
	    "*",
        "/",
        "%",
    };
    var opNames = new string[]
    {
        "AddOp",
        "SubtractOp",
        "MultiplyOp",
	    "DivideOp",
        "ModuloOp"
    };
#>
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

using System.Runtime.CompilerServices;
using Spreads.Deprecated;

namespace Spreads
{
    //// TODO review & test this trick to implicitly cast non-matching cursor types to Cursor<TKey, TValue>
    //// see CouldCalculateComplexGraph test
    //// See ECMA 334 14.2.4 & 14.4.2 http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-334.pdf

    public readonly partial struct Series<TKey, TValue, TCursor>
    where TCursor : ISpecializedCursor<TKey, TValue, TCursor>
    {
<#
for(var i = 0; i < ops.Length; i++)
{
#>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Series<TKey, TValue, ZipOp<TKey, TValue, <#= opNames[i] #><TValue>, TCursor, TCursor>> operator
            <#= ops[i] #>(Series<TKey, TValue, TCursor> series, Series<TKey, TValue, TCursor> other)
        {
            var c1 = series.GetEnumerator();
            var c2 = other.GetEnumerator();

            var zipCursor = new Zip<TKey, TValue, TValue, TCursor, TCursor>(c1, c2);
            return ZipOp(zipCursor, default(<#= opNames[i] #><TValue>)).Source;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Series<TKey, TValue, ZipOp<TKey, TValue, <#= opNames[i] #><TValue>, TCursor, Cursor<TKey, TValue>>> operator
            <#= ops[i] #>(Series<TKey, TValue, TCursor> series, Series<TKey, TValue, Cursor<TKey, TValue>> other)
        {
            var c1 = series.GetEnumerator();
            var c2 = other.GetEnumerator();

            var zipCursor = new Zip<TKey, TValue, TValue, TCursor, Cursor<TKey, TValue>>(c1, c2);
            return ZipOp(zipCursor, default(<#= opNames[i] #><TValue>)).Source;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Series<TKey, TValue, ZipOp<TKey, TValue, <#= opNames[i] #><TValue>, Cursor<TKey, TValue>, TCursor>> operator
            <#= ops[i] #>(Series<TKey, TValue> series, Series<TKey, TValue, TCursor> other)
        {
            var c1 = series.GetCursor();
            var c2 = other.GetEnumerator();

            var zipCursor = new Zip<TKey, TValue, TValue, Cursor<TKey, TValue>, TCursor>(c1, c2);
            return ZipOp(zipCursor, default(<#= opNames[i] #><TValue>)).Source;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Series<TKey, TValue, ZipOp<TKey, TValue, <#= opNames[i] #><TValue>, TCursor, Cursor<TKey, TValue>>> operator
            <#= ops[i] #>(Series<TKey, TValue, TCursor> series, Series<TKey, TValue> other)
        {
            var c1 = series.GetEnumerator();
            var c2 = other.GetCursor();

            var zipCursor = new Zip<TKey, TValue, TValue, TCursor, Cursor<TKey, TValue>>(c1, c2);
            return ZipOp(zipCursor, default(<#= opNames[i] #><TValue>)).Source;
        }

<#
}
#>

    }
}
