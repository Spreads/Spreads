<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System" #>
<#
    var avxTypes = new[]
    {
        "sbyte",
        "short",
        "int",
        "long",
        "double",
        "float"
    };

    var sseTypes = new[]
    {
        "sbyte",
        "short",
        "int",
        "long",
        "double",
        "float"
    };

    var interpolationTypes = new[]
    {
        "sbyte",
        "byte",
        "short",
        "ushort",
        "char",
        "int",
        "uint",
        "long",
        "ulong",
        "double",
        "float"
    };
#>
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

using System;
using System.Runtime.CompilerServices;
using static Spreads.Utils.Constants;
#if HAS_INTRINSICS
using Spreads.Utils;
using System.Runtime.Intrinsics;
using System.Runtime.Intrinsics.X86;
#endif

// ReSharper disable AccessToStaticMemberViaDerivedType
// ReSharper disable CompareOfFloatsByEqualityOperator
// ReSharper disable RedundantCast

namespace Spreads.Algorithms {

    public static partial class VectorSearch
    {

#if HAS_INTRINSICS

	<#
    foreach (var type in avxTypes)
    {
#>
        [MethodImpl(MethodImplAggressiveAll)]
        internal static int BinarySearchAvx2LoHi(ref <#=type#> searchSpace, int lo, int hi, <#=type#> value)
        {
            unchecked
            {
                int mask;

                <#=type#> vLo;

                if (lo > hi)
                    return ~lo;

                if (hi - lo < Vector256<<#=type#>>.Count)
                    goto LINEAR;

                Vector256<<#=type#>> vecI;
                Vector256<<#=type#>> gt;
                var valVec = Vector256.Create(value);

                // x3 is needed to safely fall into linear vectorized search:
                // after this loop all possible lo/hi are valid for linear vectorized search
                while (hi - lo >= Vector256<<#=type#>>.Count * 3)
                {
                    var i = (int) (((uint) hi + (uint) lo - Vector256<<#=type#>>.Count) >> 1);

                    vecI = Unsafe.ReadUnaligned<Vector256<<#=type#>>>(ref Unsafe.As<<#=type#>, byte>(ref Unsafe.Add(ref searchSpace, i)));
                    gt = Avx2.CompareGreaterThan(valVec, vecI);
                    mask = Avx2.MoveMask(gt.AsByte());

                    if (mask != -1)
                    {
                        if (mask != 0)
                        {
                            int clz = (int) BitUtils.LeadingZeroCount(mask);
                            int index = (32 - clz) / Unsafe.SizeOf<<#=type#>>();
                            lo = i + index;
                            vLo = UnsafeEx.ReadUnaligned(ref Unsafe.Add(ref searchSpace, lo));
                            goto RETURN;
                        }

                        // val is not greater than all in vec
                        // not i-1, i could equal;
                        hi = i;
                    }
                    else
                    {
                        // val is larger than all in vec
                        lo = i + Vector256<<#=type#>>.Count;
                    }
                }

                do
                {
                    vecI = Unsafe.ReadUnaligned<Vector256<<#=type#>>>(ref Unsafe.As<<#=type#>, byte>(ref Unsafe.Add(ref searchSpace, lo)));
                    gt = Avx2.CompareGreaterThan(valVec, vecI);
                    mask = Avx2.MoveMask(gt.AsByte());

                    var clz = BitUtils.LeadingZeroCount(mask);
                    var index = (32 - clz) / Unsafe.SizeOf<<#=type#>>();
                    lo += index;
                } while (mask == -1 & hi - lo >= Vector256<<#=type#>>.Count);

                LINEAR:

                while (value > (vLo = UnsafeEx.ReadUnaligned(ref Unsafe.Add(ref searchSpace, lo)))
                       && ++lo <= hi
                )
                {
                }

                RETURN:
                var ceq1 = -UnsafeEx.Ceq(value, vLo);
                return (ceq1 & lo) | (~ceq1 & ~lo);
            }
        }

	<#
    }
    #>

<#
    foreach (var type in sseTypes)
    {
#>
        [MethodImpl(MethodImplAggressiveAll)]
        internal static int BinarySearchSse42LoHi(ref <#=type#> searchSpace, int lo, int hi, <#=type#> value)
        {
            // Avx2 modification with mask as short and it's special handling
            unchecked
            {
                short mask;

                <#=type#> vLo;

                if (lo > hi)
                    return ~lo;

                if (hi - lo < Vector128<<#=type#>>.Count)
                    goto LINEAR;

                Vector128<<#=type#>> vecI;
                Vector128<<#=type#>> gt;
                var valVec = Vector128.Create(value);
                while (hi - lo >= Vector128<<#=type#>>.Count * 3)
                {
                    var i = (int) (((uint) hi + (uint) lo - Vector128<<#=type#>>.Count) >> 1);

                    vecI = Unsafe.ReadUnaligned<Vector128<<#=type#>>>(ref Unsafe.As<<#=type#>, byte>(ref Unsafe.Add(ref searchSpace, i)));
                    gt = Sse42.CompareGreaterThan(valVec, vecI);
                    mask = (short)(((1u << 16) - 1) & (uint)Sse42.MoveMask(gt.AsByte()));

                    if (mask != -1)
                    {
                        if (mask != 0)
                        {
                            int clz = (int) BitUtils.LeadingZeroCount((ushort) mask);
                            int index = (32 - clz) / Unsafe.SizeOf<<#=type#>>();
                            lo = i + index;
                            vLo = UnsafeEx.ReadUnaligned(ref Unsafe.Add(ref searchSpace, lo));
                            goto RETURN;
                        }
                        hi = i;
                    }
                    else
                    {
                        lo = i + Vector128<<#=type#>>.Count;
                    }
                }

                do
                {
                    vecI = Unsafe.ReadUnaligned<Vector128<<#=type#>>>(ref Unsafe.As<<#=type#>, byte>(ref Unsafe.Add(ref searchSpace, lo)));
                    gt = Sse42.CompareGreaterThan(valVec, vecI);
                    mask = (short)(((1u << 16) - 1) & (uint)Sse42.MoveMask(gt.AsByte()));

                    var clz = BitUtils.LeadingZeroCount((ushort)mask);
                    var index = (32 - clz) / Unsafe.SizeOf<<#=type#>>();
                    lo += index;
                } while (mask == -1 & hi - lo >= Vector128<<#=type#>>.Count);

                LINEAR:

                while (value > (vLo = UnsafeEx.ReadUnaligned(ref Unsafe.Add(ref searchSpace, lo)))
                       && ++lo <= hi
                )
                {
                }

                RETURN:
                var ceq1 = -UnsafeEx.Ceq(value, vLo);
                return (ceq1 & lo) | (~ceq1 & ~lo);
            }
        }

	<#
    }
    #>

#endif

<#
    foreach (var type in interpolationTypes)
    {
#>
        [MethodImpl(MethodImplAggressiveAll)]
        internal static int InterpolationSearchSpecializedLoHi(ref <#=type#> searchSpace, int lo, int hi, <#=type#> value)
        {
            // Try interpolation only for big-enough lengths and do minimal job,
            // just find the range with exponential search with minimal branches
            // and switch to binary search.
            unchecked
            {
                var range = hi - lo;
                if (range > Settings.SAFE_CACHE_LINE / Unsafe.SizeOf<<#=type#>>())
                {
                    var vLo = UnsafeEx.ReadUnaligned(ref Unsafe.Add(ref searchSpace, lo));
                    var vRange = UnsafeEx.ReadUnaligned(ref Unsafe.Add(ref searchSpace, hi)) - vLo;

                    var middle = (double) UnsafeEx.ReadUnaligned(ref Unsafe.Add(ref searchSpace, (int)(((uint)hi + (uint)lo) >> 1))) / vRange;
                    if(0.3 > middle || middle > 0.7)
                        goto BS;

                    // (hi - lo) <= int32.MaxValue
                    // vlo could be zero while value could easily be close to int64.MaxValue (nanos in unix time, we are now between 60 and 61 bit at 60.4)
                    // convert to double here to avoid overflow and for much faster calculations
                    // (only 4 cycles vs 25 cycles https://lemire.me/blog/2017/11/16/fast-exact-integer-divisions-using-floating-point-operations/)
                    // var iD = (range * (double) (value - vLo)) / vRange;

                    int i = (int) ((range * (double) (value - vLo)) / vRange);

                    if ((uint) i > range)
                        i = i < 0 ? 0 : range;

                    // make i relative to searchSpace
                    i += lo;

                    var vi = UnsafeEx.ReadUnaligned(ref Unsafe.Add(ref searchSpace, i));
                    if (value == vi)
                        goto FOUND;

                    var step = 1;

                    if (value > vi)
                    {
                        while (true)
                        {
                            i += step;

                            if (i > hi)
                                break;

                            vi = UnsafeEx.ReadUnaligned(ref Unsafe.Add(ref searchSpace, i));

                            if (value <= vi)
                            {
                                if (value == vi)
                                    goto FOUND;

                                hi = i - 1;
                                break;
                            }

                            step <<= 1;
                        }
                        lo = i - step + 1;
                        goto BS;
                    }
                    else
                    {
                        while (true)
                        {
                            i -= step;

                            if (i < lo)
                                break;

                            vi = UnsafeEx.ReadUnaligned(ref Unsafe.Add(ref searchSpace, i));

                            if (value >= vi)
                            {
                                if (value == vi)
                                    goto FOUND;

                                lo = i + 1;
                                break;
                            }

                            step <<= 1;
                        }
                        hi = i + step - 1;
                        goto BS;
                    }

                    FOUND:
                    return i;
                }

                BS:
                return BinarySearchLoHi(ref searchSpace, lo, hi, value);

            }
        }

	<#
    }
    #>
}
}
