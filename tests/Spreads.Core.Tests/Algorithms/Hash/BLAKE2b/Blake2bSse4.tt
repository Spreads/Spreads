<#@ template language="C#" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
//	<auto-generated>
//		This code was generated from a template.
//		Manual changes will be overwritten if the code is regenerated.
//	</auto-generated>
//------------------------------------------------------------------------------

#if HAS_INTRINSICS
using System.Runtime.Intrinsics;
using System.Runtime.Intrinsics.X86;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;

namespace Spreads.Algorithms.Hash.BLAKE2b
{
	unsafe public partial struct Blake2bContext
	{
		// SIMD algorithm described in https://eprint.iacr.org/2012/275.pdf
#if HAS_AGGR_OPT
		[MethodImpl(MethodImplOptions.AggressiveOptimization)]
#endif
		private static void mixSse41(ulong* sh, ulong* m)
		{
			ref byte rrm = ref MemoryMarshal.GetReference(rormask);
			var r24 = Unsafe.As<byte, Vector128<byte>>(ref rrm);
			var r16 = Unsafe.As<byte, Vector128<byte>>(ref Unsafe.Add(ref rrm, Vector128<byte>.Count));

			var row1l = Sse2.LoadVector128(sh);
			var row1h = Sse2.LoadVector128(sh + 2);
			var row2l = Sse2.LoadVector128(sh + 4);
			var row2h = Sse2.LoadVector128(sh + 6);

			ref byte riv = ref MemoryMarshal.GetReference(ivle);
			var row3l = Unsafe.As<byte, Vector128<ulong>>(ref riv);
			var row3h = Unsafe.As<byte, Vector128<ulong>>(ref Unsafe.Add(ref riv, 16));
			var row4l = Unsafe.As<byte, Vector128<ulong>>(ref Unsafe.Add(ref riv, 32));
			var row4h = Unsafe.As<byte, Vector128<ulong>>(ref Unsafe.Add(ref riv, 48));

			row4l = Sse2.Xor(row4l, Sse2.LoadVector128(sh + 8));  // t[]
			row4h = Sse2.Xor(row4h, Sse2.LoadVector128(sh + 10)); // f[]

<#
for (int i = 0; i < 12; i++) {
	WriteLine($"\t\t\t//ROUND {i+1}");
	if (i == 0) {
#>
			var m0 = Sse2.LoadVector128(m);
			var m1 = Sse2.LoadVector128(m + 2);
			var m2 = Sse2.LoadVector128(m + 4);
			var m3 = Sse2.LoadVector128(m + 6);

<#
	}
	loadcode(i, 0);
	g1();
	loadcode(i, 1);
	g2();
	diagonalize(i == 0);

	if (i == 0) {
#>
			var m4 = Sse2.LoadVector128(m + 8);
			var m5 = Sse2.LoadVector128(m + 10);
			var m6 = Sse2.LoadVector128(m + 12);
			var m7 = Sse2.LoadVector128(m + 14);

<#
	}
	loadcode(i, 2);
	g1();
	loadcode(i, 3);
	g2();
	undiagonalize();
}
#>
			row1l = Sse2.Xor(row1l, row3l);
			row1h = Sse2.Xor(row1h, row3h);
			row1l = Sse2.Xor(row1l, Sse2.LoadVector128(sh));
			row1h = Sse2.Xor(row1h, Sse2.LoadVector128(sh + 2));
			Sse2.Store(sh, row1l);
			Sse2.Store(sh + 2, row1h);

			row2l = Sse2.Xor(row2l, row4l);
			row2h = Sse2.Xor(row2h, row4h);
			row2l = Sse2.Xor(row2l, Sse2.LoadVector128(sh + 4));
			row2h = Sse2.Xor(row2h, Sse2.LoadVector128(sh + 6));
			Sse2.Store(sh + 4, row2l);
			Sse2.Store(sh + 6, row2h);
		}
	}
}
#endif
<#+

void diagonalize(bool first) {
#>
			//DIAGONALIZE

			<#= first ? "var " : "" #>t0 = Ssse3.AlignRight(row2h, row2l, 8);
			<#= first ? "var " : "" #>t1 = Ssse3.AlignRight(row2l, row2h, 8);
			row2l = t0;
			row2h = t1;

			b0 = row3l;
			row3l = row3h;
			row3h = b0;

			t0 = Ssse3.AlignRight(row4h, row4l, 8);
			t1 = Ssse3.AlignRight(row4l, row4h, 8);
			row4l = t1;
			row4h = t0;

<#+
}

void undiagonalize() {
#>
			//UNDIAGONALIZE

			t0 = Ssse3.AlignRight(row2l, row2h, 8);
			t1 = Ssse3.AlignRight(row2h, row2l, 8);
			row2l = t0;
			row2h = t1;

			b0 = row3l;
			row3l = row3h;
			row3h = b0;

			t0 = Ssse3.AlignRight(row4l, row4h, 8);
			t1 = Ssse3.AlignRight(row4h, row4l, 8);
			row4l = t1;
			row4h = t0;

<#+
}

void g1() {
#>

			//G1
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

			row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
			row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

			row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
			row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();

<#+
}

void g2() {
#>

			//G2
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

			row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
			row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

			row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
			row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

<#+
}

void loadcode(int round, int part) {
	int r = round % 10 * 10 + part;
	switch (r) {
		case 0:
#>
			<#= round == 0 ? "var " : "" #>b0 = Sse2.UnpackLow(m0, m1);
			<#= round == 0 ? "var " : "" #>b1 = Sse2.UnpackLow(m2, m3);
<#+
			break;
		case 1:
#>
			b0 = Sse2.UnpackHigh(m0, m1);
			b1 = Sse2.UnpackHigh(m2, m3);
<#+
			break;
		case 2:
#>
			b0 = Sse2.UnpackLow(m4, m5);
			b1 = Sse2.UnpackLow(m6, m7);
<#+
			break;
		case 3:
#>
			b0 = Sse2.UnpackHigh(m4, m5);
			b1 = Sse2.UnpackHigh(m6, m7);
<#+
			break;
		case 10:
#>
			b0 = Sse2.UnpackLow(m7, m2);
			b1 = Sse2.UnpackHigh(m4, m6);
<#+
			break;
		case 11:
#>
			b0 = Sse2.UnpackLow(m5, m4);
			b1 = Ssse3.AlignRight(m3, m7, 8);
<#+
			break;
		case 12:
#>
			b0 = Sse2.Shuffle(m0.AsUInt32(), 0b_01_00_11_10).AsUInt64();
			b1 = Sse2.UnpackHigh(m5, m2);
<#+
			break;
		case 13:
#>
			b0 = Sse2.UnpackLow(m6, m1);
			b1 = Sse2.UnpackHigh(m3, m1);
<#+
			break;
		case 20:
#>
			b0 = Ssse3.AlignRight(m6, m5, 8);
			b1 = Sse2.UnpackHigh(m2, m7);
<#+
			break;
		case 21:
#>
			b0 = Sse2.UnpackLow(m4, m0);
			b1 = Sse41.Blend(m1.AsUInt16(), m6.AsUInt16(), 0b_1111_0000).AsUInt64();
<#+
			break;
		case 22:
#>
			b0 = Sse41.Blend(m5.AsUInt16(), m1.AsUInt16(), 0b_1111_0000).AsUInt64();
			b1 = Sse2.UnpackHigh(m3, m4);
<#+
			break;
		case 23:
#>
			b0 = Sse2.UnpackLow(m7, m3);
			b1 = Ssse3.AlignRight(m2, m0, 8);
<#+
			break;
		case 30:
#>
			b0 = Sse2.UnpackHigh(m3, m1);
			b1 = Sse2.UnpackHigh(m6, m5);
<#+
			break;
		case 31:
#>
			b0 = Sse2.UnpackHigh(m4, m0);
			b1 = Sse2.UnpackLow(m6, m7);
<#+
			break;
		case 32:
#>
			b0 = Sse41.Blend(m1.AsUInt16(), m2.AsUInt16(), 0b_1111_0000).AsUInt64();
			b1 = Sse41.Blend(m2.AsUInt16(), m7.AsUInt16(), 0b_1111_0000).AsUInt64();
<#+
			break;
		case 33:
#>
			b0 = Sse2.UnpackLow(m3, m5);
			b1 = Sse2.UnpackLow(m0, m4);
<#+
			break;
		case 40:
#>
			b0 = Sse2.UnpackHigh(m4, m2);
			b1 = Sse2.UnpackLow(m1, m5);
<#+
			break;
		case 41:
#>
			b0 = Sse41.Blend(m0.AsUInt16(), m3.AsUInt16(), 0b_1111_0000).AsUInt64();
			b1 = Sse41.Blend(m2.AsUInt16(), m7.AsUInt16(), 0b_1111_0000).AsUInt64();
<#+
			break;
		case 42:
#>
			b0 = Sse41.Blend(m7.AsUInt16(), m5.AsUInt16(), 0b_1111_0000).AsUInt64();
			b1 = Sse41.Blend(m3.AsUInt16(), m1.AsUInt16(), 0b_1111_0000).AsUInt64();
<#+
			break;
		case 43:
#>
			b0 = Ssse3.AlignRight(m6, m0, 8);
			b1 = Sse41.Blend(m4.AsUInt16(), m6.AsUInt16(), 0b_1111_0000).AsUInt64();
<#+
			break;
		case 50:
#>
			b0 = Sse2.UnpackLow(m1, m3);
			b1 = Sse2.UnpackLow(m0, m4);
<#+
			break;
		case 51:
#>
			b0 = Sse2.UnpackLow(m6, m5);
			b1 = Sse2.UnpackHigh(m5, m1);
<#+
			break;
		case 52:
#>
			b0 = Sse41.Blend(m2.AsUInt16(), m3.AsUInt16(), 0b_1111_0000).AsUInt64();
			b1 = Sse2.UnpackHigh(m7, m0);
<#+
			break;
		case 53:
#>
			b0 = Sse2.UnpackHigh(m6, m2);
			b1 = Sse41.Blend(m7.AsUInt16(), m4.AsUInt16(), 0b_1111_0000).AsUInt64();
<#+
			break;
		case 60:
#>
			b0 = Sse41.Blend(m6.AsUInt16(), m0.AsUInt16(), 0b_1111_0000).AsUInt64();
			b1 = Sse2.UnpackLow(m7, m2);
<#+
			break;
		case 61:
#>
			b0 = Sse2.UnpackHigh(m2, m7);
			b1 = Ssse3.AlignRight(m5, m6, 8);
<#+
			break;
		case 62:
#>
			b0 = Sse2.UnpackLow(m0, m3);
			b1 = Sse2.Shuffle(m4.AsUInt32(), 0b_01_00_11_10).AsUInt64();
<#+
			break;
		case 63:
#>
			b0 = Sse2.UnpackHigh(m3, m1);
			b1 = Sse41.Blend(m1.AsUInt16(), m5.AsUInt16(), 0b_1111_0000).AsUInt64();
<#+
			break;
		case 70:
#>
			b0 = Sse2.UnpackHigh(m6, m3);
			b1 = Sse41.Blend(m6.AsUInt16(), m1.AsUInt16(), 0b_1111_0000).AsUInt64();
<#+
			break;
		case 71:
#>
			b0 = Ssse3.AlignRight(m7, m5, 8);
			b1 = Sse2.UnpackHigh(m0, m4);
<#+
			break;
		case 72:
#>
			b0 = Sse2.UnpackHigh(m2, m7);
			b1 = Sse2.UnpackLow(m4, m1);
<#+
			break;
		case 73:
#>
			b0 = Sse2.UnpackLow(m0, m2);
			b1 = Sse2.UnpackLow(m3, m5);
<#+
			break;
		case 80:
#>
			b0 = Sse2.UnpackLow(m3, m7);
			b1 = Ssse3.AlignRight(m0, m5, 8);
<#+
			break;
		case 81:
#>
			b0 = Sse2.UnpackHigh(m7, m4);
			b1 = Ssse3.AlignRight(m4, m1, 8);
<#+
			break;
		case 82:
#>
			b0 = m6;
			b1 = Ssse3.AlignRight(m5, m0, 8);
<#+
			break;
		case 83:
#>
			b0 = Sse41.Blend(m1.AsUInt16(), m3.AsUInt16(), 0b_1111_0000).AsUInt64();
			b1 = m2;
<#+
			break;
		case 90:
#>
			b0 = Sse2.UnpackLow(m5, m4);
			b1 = Sse2.UnpackHigh(m3, m0);
<#+
			break;
		case 91:
#>
			b0 = Sse2.UnpackLow(m1, m2);
			b1 = Sse41.Blend(m3.AsUInt16(), m2.AsUInt16(), 0b_1111_0000).AsUInt64();
<#+
			break;
		case 92:
#>
			b0 = Sse2.UnpackHigh(m7, m4);
			b1 = Sse2.UnpackHigh(m1, m6);
<#+
			break;
		case 93:
#>
			b0 = Ssse3.AlignRight(m7, m5, 8);
			b1 = Sse2.UnpackLow(m6, m0);
<#+
			break;
	}
}
#>